import os, random

def error(code, msg):
    print(msg)
    Exit(code)

Help("""
usage: scons command
       scons -c

options:
  -c, --clean   Remove all of the files generated by previous builds.  This
                acts as a hard reset in the case were the build tools ever
                fail to compile the most recent copy of your files.

description: Runs the scons build tools. 

Commands:
  checkout
      usage: scons checkout project=PROJECT
      
      options:
        PROJECT   A number between 1 and 8

      description: Checks out the code necessary for a requested project
                   if  the file already exists, you will be  prompted to
                   keep or replace the file.

  build
    usage: scons [build]
    
    descrption: Builds the image from the source files.  This command will
                build the binary  `sans` file which is  used by  the `run` 
                and `test` commands respectively.
""")

builder   = ".conscript"
build_dir = ".build"
inc_dir   = os.path.join("src", "include")

CC = "gcc"
cflags = "-Wall -Werror -O0 -g -std=gnu11 -pedantic"
lflags = f""
AS = "as"
aflags = "-g -O0"

env = Environment(CC=CC, AS=AS, CPPPATH=inc_dir, LINKFLAGS=lflags)
if not any([env.GetOption(c) for c in ["clean", "help"]]):
    try:
        env["project"] = ARGUMENTS["project"]
    except KeyError:
        if "checkout" in COMMAND_LINE_TARGETS:
            error(-1 ,"[Error] Cannot checkout code without explicit `project=#` argument")
        try:
            with open(".msfile", 'r') as f:
                env["project"] = ARGUMENTS.get("project", f.read().split('\n')[0])
        except OSError as exp:
            print(exp)
            error(-1, """[Error] Cannot determine project, run `scons checkout project=#`""")
else:
    env["project"]="0"

env.Append(ENV={"PATH": os.environ["PATH"]}, CFLAGS=cflags, ASFLAGS=aflags)
script = env.SConscript(builder, variant_dir=build_dir, duplicate=0, exports='env')
